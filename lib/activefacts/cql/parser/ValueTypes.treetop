#
#       ActiveFacts CQL Parser.
#       Parse rules relating to ValueType definitions.
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    grammar ValueTypes
      rule value_type
        s each?
        s term
        m1:mapping_pragmas
        # REVISIT: ORM2 would allow (subtype_prefix term)?
        written_as
        any? s
        base:term s
        value_type_parameters
        u:in_units?
        a:auto_assignment?
        context:context_note?
        vc:value_constraint?
        m2:mapping_pragmas
        context2:context_note?
        s ';' s
        <AST::ValueType>
      end

      rule in_units
        in S units
      end

      rule value_type_parameters
        '(' s tpl:type_parameter_list? ')' s
          { def values; tpl.empty? ? [] : tpl.values; end }
        / s
          { def values; []; end }
      end

      rule type_parameter_list
        head:parameter s tail:( ',' s parameter s)*
        {
          def values
            [head.value, *tail.elements.map{|i| i.parameter.value}]
          end
        }
      end

      rule parameter
        ordered_parameter / named_parameter
      end

      rule ordered_parameter
        number
      end

      rule named_parameter
        ( # Set the value for a parameter
          with s parameter_name as s literal:parameter_literal
          /
          parameter_name ':' s literal:parameter_literal
        ) <AST::ValueTypeParameterSetting>
        / # Define a new parameter
        accepts s parameter_name as value_type:term s vr:(restricted s to s parameter_restriction)?
          <AST::ValueTypeParameterDefinition>
        / # Restrict values for a parameter
        restricts s parameter_name to s parameter_restriction
          <AST::ValueTypeParameterRestriction>
      end

      rule parameter_name
        !(with/accepts/restricts/as/term) id s
        { def value; id.text_value; end }
      end

      rule parameter_literal
        number
        /   # We need the text_value of a string here, not the result of parsing it
        string { def value; text_value; end }
      end

      rule parameter_restriction
        range_list s
          { def values; range_list.ranges; end}
        /
        parameter_literal s direction:(min / max)? s
          { def values; [:value, parameter_literal.value, direction.text_value]; end}
      end

      rule unit_definition
        u:(
          s coeff:unit_coefficient? base:units? s o:unit_offset?
          conversion
          singular:unit_name s plural:('/' s p:unit_name s)?
        /
          s singular:unit_name s plural:('/' s p:unit_name s)?
          conversion
          coeff:unit_coefficient? base:units? s o:unit_offset?
        )
        q:(approximately '' / ephemera s url )? s
        ';'
        <AST::UnitDefinition>
      end

      rule unit_name
        id
        {
          def node_type; :unit; end
        }
      end


      rule unit_coefficient
        numerator:number denominator:(s '/' s number)? s
        {
          def ast
            [ numerator.text_value,
              (denominator.text_value.empty? ? "1" : denominator.number.text_value)
            ]
          end
        }
      end

      rule unit_offset
        sign:[-+] s number s
        { def value
            sign.text_value == '-' ? "-"+number.text_value : number.text_value
          end
        }
      end

      # In a unit definition, we may use undefined base units; this is the only way to get fundamental units
      rule units
        unit_numerator div:unit_denominator?
        { def value
            unit_numerator.value + (div.text_value.empty? ? [] : div.value)
          end
        }
      end

      rule unit_numerator
        !non_unit maybe_unit s tail:(!non_unit maybe_unit s)*
        { def value
            tail.elements.inject([maybe_unit.value]) { |a, e| a << e.maybe_unit.value }
          end
        }
      end

      rule unit_denominator
        '/' s maybe_unit s tail:(!non_unit maybe_unit s)*
        { def value
            tail.elements.inject([maybe_unit.inverse]) { |a, e| a << e.maybe_unit.inverse }
          end
        }
      end

      rule non_unit
        restricted_to / conversion / approximately / ephemera / auto_assignment
      end

      rule unit
        maybe_unit &{|s| input.parser.unit?(s[0].unit_name.text_value) }
      end

      rule maybe_unit
        unit_name pow:('^' '-'? [0-9])?
        { def value
            [unit_name.text_value, pow.text_value.empty? ? 1 : Integer(pow.text_value[1..-1])]
          end
          def inverse
            a = value
            a[1] = -a[1]
            a
          end
        }
      end

      rule value_constraint
        restricted_to restricted_values context:context_note? enforcement
        <AST::ValueConstraint>
        # REVISIT: "where the possible value/s of that <Term> is/are value (, ...)"
      end

      rule restricted_values
        range_list s u:units?
        {
          def values
            { :ranges => range_list.ranges,
              :units => u.empty? ? nil : u.value
            }
          end
        }
        /
        regular_expression
        {
          def values
            { :regular_expression => contents }
          end
        }
      end

      rule range_list
        '{' s
          head:range s tail:( ',' s range )*
        '}' s
        {
          def ranges
            [head.value, *tail.elements.map{|e| e.range.value }]
          end
        }
      end

    end
  end
end
