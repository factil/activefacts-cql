#
#       ActiveFacts CQL Parser.
#       Parse rules relating to Expressions
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    grammar Expressions
      rule expression
        sum
      end

      rule sum
        t0:product s tail:(op:('+' / '-') s t1:product s)* <AST::SumExpression>
      end

      rule product
        f0:factor s tail:(op:('/' / '%' / '*') s f1:factor s)* <AST::ProductExpression>
      end

      rule factor
	literal_factor
        / variable
	/ parenthesised_expression
      end

      rule literal_factor
        literal u:unit? s <AST::LiteralFactor>
      end

      rule parenthesised_expression
        !context_note '(' s sum s ')' s
	{ def ast; sum.ast; end }
      end

      rule variable
	# REVISIT: Need to be able to include some/that here
        derived:term
	s role_id:(role_name / subscript)? s
	<AST::Variable>
      end

    end
  end
end
