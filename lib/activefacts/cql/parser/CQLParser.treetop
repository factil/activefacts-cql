#
#       ActiveFacts CQL Parser.
#       Parse rules relating to high-level CQL definitions and constraints.
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
require 'activefacts/cql/parser/LexicalRules'
require 'activefacts/cql/parser/Language/English'
require 'activefacts/cql/parser/Expressions'
require 'activefacts/cql/parser/Terms'
require 'activefacts/cql/parser/ObjectTypes'
require 'activefacts/cql/parser/ValueTypes'
require 'activefacts/cql/parser/FactTypes'
require 'activefacts/cql/parser/Constraints'
require 'activefacts/cql/parser/TransformRules'
require 'activefacts/cql/parser/ContextNotes'

module ActiveFacts
  module CQL
    grammar CQL
      include LexicalRules
      include Expressions
      include Terms
      include ObjectTypes
      include ValueTypes
      include FactTypes
      include Constraints
      include TransformRules
      include ContextNotes

      # We don't parse a whole file at a time, but pick off individual definitions instead.
      # These first two rules are here for documentation purposes.
      rule cql_file
        s definitions
      end
      
      rule definitions
	seq:definition* <AST::Definitions>
      end

      rule definition
        definition_body s <AST::Definition>
      end

      rule definition_body
        schema_definition
	/ transform_definition
        / import_definition
	/ prescan	    # Prescan the rest of the statement to identify local terms (always fails)
	/ statement
      end

      rule statement
	  subset_constraint
        / equality_constraint
        / set_constraint
        / presence_constraint
        # REVISIT: These are always defined inline at present: / value_constraint
        / unit_definition
        / object_type
        / fact_type
        / informal_description
        / query
        / transform_rule
	/ empty_statement
      end

      rule schema_definition
        s ( schema / topic / vocabulary ) S schema_name vn:version_number? s ';' <AST::Schema>
      end

      rule transform_definition
        s transform S schema_name vn:version_number? s ';' <AST::Transform>
      end

      rule schema_name
        id tail:(S !version id)*
        {
	  def node_type; :vocabulary; end
	  def value
            [id.value, *tail.elements.map{|e| e.id.value }].join(' ')
	  end
	}
      end

      rule import_definition
        s import i:import_role? S schema_name vp:version_pattern? alias_list ';'
	<AST::Import>
      end

      rule version_number
        S version S value:version_number_string
      end

      rule version_pattern
        S version S pattern:version_pattern_string
      end

      rule version_number_string
        [0-9]+ '.' [0-9]+ '.' [0-9]+ ('-' [0-9A-Za-z-]+ ('.' [0-9A-Za-z-]+ )* )?
      end

      rule version_pattern_string
        [0-9]+ ('.' [0-9]+ ('.' [0-9]+ ('-' [0-9A-Za-z-]+ ('.' [0-9A-Za-z-]+ )* )? )? )?
      end

      rule import_role
        S id
        {
          def value
            id.text_value
          end
        }
      end

      # REVISIT: Need a way to define equivalent readings for fact types here (and in the metamodel)
      rule alias_list
        ( s ',' s alias S aliased_from:alias_term S as S alias_to:alias_term s )*
        {
          def value
            elements.inject({}){|h, e| h[e.aliased_from.value] = e.alias_to; h }
          end
        }
      end

      rule alias_term
        id
        { def node_type; :term; end }
      end

      rule informal_description
        informally s ',' s
	subject:informal_description_subject s
	informal_description_body
	informal_description_closer
	<AST::InformalDefinition>
      end

      rule empty_statement
        s ';' s { def ast; nil; end }
      end

      rule informal_description_subject
	signifier:each S term         # Informal definition of an object type
	/
	signifier:when S reading:(simple_noun_phrase / linking_word)+ s ','       # or a fact type
      end

      rule informal_description_body
	(!informal_description_closer (string / .))*  # Allow . inside a string
      end

      # The description terminates in a fullstop at the end of a line, or EOF
      rule informal_description_closer
	(!. / '.' [ \t\r]* "\n")
      end
    end
  end
end
